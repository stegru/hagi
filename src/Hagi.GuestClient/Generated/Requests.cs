
// <auto-generated/>

namespace Hagi.HagiGuest
{
    using System;
    using Shared.Api;

    public partial class RequestOptions {

        public static readonly Type[] GeneratedTypes = {
            typeof(FileMapRequestOptions),
typeof(JoinRequestOptions),
typeof(MessageRequestOptions),
typeof(AskRequestOptions),
typeof(OpenRequestOptions)
        };
    }


[CommandLine.Verb("filemap", HelpText = "")]
[Request("/hagi/map")]
public partial class FileMapRequestOptions : RequestOptions
{
    public override string RequestUrl => "/hagi/map";

        [CommandLine.Option("path", HelpText = "", Hidden = false, Required = false, MetaValue = "<path>")]
        public String Path { get; set; }

    public override HostRequest GetRequest() {
        FileMapRequest req = new FileMapRequest() {
            Path = this.Path,
        };
        return req;
    }
}

[CommandLine.Verb("join", HelpText = "Join the host.")]
[Request("/hagi/auth/join")]
public partial class JoinRequestOptions : RequestOptions
{
    public override string RequestUrl => "/hagi/auth/join";

        [CommandLine.Option("guest", HelpText = "The guest ID.", Hidden = false, Required = false, MetaValue = "<guest>")]
        public String Guest { get; set; }
        [CommandLine.Option("name", HelpText = "The machine name.", Hidden = false, Required = false, MetaValue = "<name>")]
        public String MachineName { get; set; }
        [CommandLine.Option("secret", HelpText = "", Hidden = false, Required = false, MetaValue = "<secret>")]
        public String SharedSecret { get; set; }

    public override HostRequest GetRequest() {
        JoinRequest req = new JoinRequest() {
            Guest = this.Guest,
            MachineName = this.MachineName,
            SharedSecret = this.SharedSecret,
        };
        return req;
    }
}

[CommandLine.Verb("message", HelpText = "Displays a message.")]
[Request("/hagi/message/show")]
public partial class MessageRequestOptions : RequestOptions
{
    public override string RequestUrl => "/hagi/message/show";

        [CommandLine.Option("message", HelpText = "The message text.", Hidden = false, Required = false, MetaValue = "<message>")]
        public String Message { get; set; }
        [CommandLine.Option("title", HelpText = "The message title.", Hidden = false, Required = false, MetaValue = "<title>")]
        public String Title { get; set; }
        [CommandLine.Option("dialog", HelpText = "Show a dialog, rather than a notification.", Hidden = false, Required = false, MetaValue = "")]
        public Boolean Dialog { get; set; }

    public override HostRequest GetRequest() {
        MessageRequest req = new MessageRequest() {
            Message = this.Message,
            Title = this.Title,
            Dialog = this.Dialog,
        };
        return req;
    }
}

[CommandLine.Verb("ask", HelpText = "Displays a dialog message, asking a yes or no question.")]
[Request("/hagi/message/ask")]
public partial class AskRequestOptions : RequestOptions
{
    public override string RequestUrl => "/hagi/message/ask";

        [CommandLine.Option("message", HelpText = "The message text.", Hidden = false, Required = false, MetaValue = "<message>")]
        public String Message { get; set; }
        [CommandLine.Option("title", HelpText = "The message title.", Hidden = false, Required = false, MetaValue = "<title>")]
        public String Title { get; set; }

    public override HostRequest GetRequest() {
        AskRequest req = new AskRequest() {
            Message = this.Message,
            Title = this.Title,
        };
        return req;
    }
}

[CommandLine.Verb("open", HelpText = "Opens a file on the host.")]
[Request("/hagi/open")]
public partial class OpenRequestOptions : RequestOptions
{
    public override string RequestUrl => "/hagi/open";

        [CommandLine.Value(0, HelpText = "A url or a path on the guest.", Hidden = false, Required = true, MetaValue = "<path>")]
        public String Path { get; set; }
        [CommandLine.Option("file", HelpText = "'path' is a file", Hidden = false, Required = false, MetaValue = "")]
        public Boolean File { get; set; }
        [CommandLine.Option("url", HelpText = "'path' is a url", Hidden = false, Required = false, MetaValue = "")]
        public Boolean Url { get; set; }

    public override HostRequest GetRequest() {
        OpenRequest req = new OpenRequest() {
            Path = this.Path,
            File = this.File,
            Url = this.Url,
        };
        return req;
    }
}
}