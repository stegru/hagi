@using System.Collections.Generic
@using System.Linq
@using System.Text
@using ClientCodeGen.Models
@using HagiShared.Api
@inherits HelpTemplate


@{
  Dictionary<string, string?> summaries = new Dictionary<string, string?>();

  foreach (RequestModel request in this.AllRequests)
  {
    StringBuilder fullCommand = new StringBuilder(request.Request.NameLower);
    StringBuilder shortCommand = new StringBuilder(request.Request.NameLower);

    Dictionary<string, string?> options = new Dictionary<string, string?>();

    foreach (OptionAttribute option in request.Options.OrderBy(o => !o.IsPayload).ThenBy(o => !o.Required))
    {
      fullCommand.Append(' ');
      string optionText;
      if (option.IsPayload)
      {
        optionText = $"<{option.Name}>";
        shortCommand.Append($" {optionText}");
      }
      else if (option.IsFlag)
      {
        optionText = $"--{option.Name}";
      }
      else
      {
        optionText = $"--{option.Name} <{option.Name}>";
      }

      fullCommand.Append(option.Required ? optionText : $"[{optionText}]");

      options[optionText] = option.Info;
    }

    summaries[shortCommand.ToString()] = request.Request.Info;

    string endMarker = $"end_{request.Request.NameLower}";

    <text>
      @request.Request.NameLower)
        sed "s/%THIS%/$THIS/g" << '@endMarker'
%THIS% @request.Request.NameLower

  @request.Request.Info

usage: %THIS% @fullCommand.ToString()

      @{

        int width = options.Keys.Max(k => k.Length) + 2;
        foreach ((string option, string? info) in options)
        {
          this.WriteLiteral(string.IsNullOrEmpty(info)
            ? $"  {option}\n"
            : $"  {option.PadRight(width)} {info}\n");
        }
        this.WriteLiteral($"\n{endMarker}\n");
      }
      ;;
    </text>
  }
}

    ALL)
      show_action_help
@foreach (string action in this.AllRequests.Select(r => r.Request.NameLower).OrderBy(a => a))
{
      @:echo; show_action_help @action
}
;;

    *)
      sed "s/%THIS%/$THIS/g" << '_help'
usage: %THIS% @("<action>") [options]

Actions:
@{
  int actionWidth = summaries.Keys.Max(k => k.Length) + 2;
  foreach ((string action, string? info) in summaries)
  {
    this.WriteLiteral(string.IsNullOrEmpty(info)
      ? $"   {action}\n"
      : $"   {action.PadRight(actionWidth)} {info}\n");
  }
}

For information on each action: %THIS% @("<action>") --help
      @{ this.WriteLiteral("\n_help\n"); }

    ;;
